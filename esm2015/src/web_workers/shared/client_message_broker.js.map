{"version":3,"file":"client_message_broker.js","sourceRoot":"","sources":["../../../../../../packages/platform-webworker/src/web_workers/shared/client_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, Injectable, Type, Éµstringify as stringify} from '@angular/core';\nimport {MessageBus} from './message_bus';\nimport {Serializer, SerializerTypes} from './serializer';\n\n/**\n * @publicApi\n */\n@Injectable()\nexport class ClientMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n\n  /** @internal */\n  constructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    this._serializer = _serializer;\n  }\n\n  /**\n   * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.\n   */\n  createMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker(this._messageBus, this._serializer, channel);\n  }\n}\n\ninterface PromiseCompleter {\n  resolve: (result: any) => void;\n  reject: (err: any) => void;\n}\n\n/**\n * @publicApi\n */\nexport class ClientMessageBroker {\n  private _pending = new Map<string, PromiseCompleter>();\n  private _sink: EventEmitter<any>;\n  /** @internal */\n  public _serializer: Serializer;\n\n  /** @internal */\n  constructor(messageBus: MessageBus, _serializer: Serializer, private channel: any) {\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    const source = messageBus.from(channel);\n\n    source.subscribe({next: (message: ResponseMessageData) => this._handleMessage(message)});\n  }\n\n  private _generateMessageId(name: string): string {\n    const time: string = stringify(new Date().getTime());\n    let iteration: number = 0;\n    let id: string = name + time + stringify(iteration);\n    while (this._pending.has(id)) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n\n  runOnService(args: UiArguments, returnType: Type<any>|SerializerTypes|null): Promise<any>|null {\n    const fnArgs: any[] = [];\n    if (args.args) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    let promise: Promise<any>|null;\n    let id: string|null = null;\n    if (returnType != null) {\n      let completer: PromiseCompleter = undefined !;\n      promise = new Promise((resolve, reject) => { completer = {resolve, reject}; });\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n\n      promise.catch((err) => {\n        if (console && console.error) {\n          // tslint:disable-next-line:no-console\n          console.error(err);\n        }\n\n        completer.reject(err);\n      });\n\n      promise = promise.then(\n          (v: any) => this._serializer ? this._serializer.deserialize(v, returnType) : v);\n    } else {\n      promise = null;\n    }\n\n    const message: RequestMessageData = {\n      'method': args.method,\n      'args': fnArgs,\n    };\n    if (id != null) {\n      message['id'] = id;\n    }\n    this._sink.emit(message);\n\n    return promise;\n  }\n\n  private _handleMessage(message: ResponseMessageData): void {\n    if (message.type === 'result' || message.type === 'error') {\n      const id = message.id !;\n      if (this._pending.has(id)) {\n        if (message.type === 'result') {\n          this._pending.get(id) !.resolve(message.value);\n        } else {\n          this._pending.get(id) !.reject(message.value);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\ninterface RequestMessageData {\n  method: string;\n  args?: any[];\n  id?: string;\n}\n\ninterface ResponseMessageData {\n  type: 'result'|'error';\n  value?: any;\n  id?: string;\n}\n\n/**\n * @publicApi\n */\nexport class FnArg {\n  constructor(\n      public value: any, public type: Type<any>|SerializerTypes = SerializerTypes.PRIMITIVE) {}\n}\n\n/**\n * @publicApi\n */\nexport class UiArguments {\n  constructor(public method: string, public args?: FnArg[]) {}\n}\n"]}